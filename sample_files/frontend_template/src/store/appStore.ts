/**
 * Global application state management using Zustand
 */

import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\nexport interface AppState {\n  // Theme\n  theme: 'light' | 'dark';\n  setTheme: (theme: 'light' | 'dark') => void;\n  \n  // User preferences\n  sidebarCollapsed: boolean;\n  setSidebarCollapsed: (collapsed: boolean) => void;\n  \n  // Application status\n  isConnected: boolean;\n  setIsConnected: (connected: boolean) => void;\n  \n  // Loading states\n  isLoading: boolean;\n  setIsLoading: (loading: boolean) => void;\n  \n  // Current user (if authentication is implemented)\n  user: {\n    id: string;\n    name: string;\n    email: string;\n  } | null;\n  setUser: (user: AppState['user']) => void;\n  \n  // Notification settings\n  notifications: {\n    enabled: boolean;\n    sound: boolean;\n  };\n  setNotifications: (notifications: AppState['notifications']) => void;\n}\n\nexport const useAppStore = create<AppState>()(n  persist(\n    (set) => ({\n      // Default values\n      theme: 'light',\n      sidebarCollapsed: false,\n      isConnected: true,\n      isLoading: false,\n      user: null,\n      notifications: {\n        enabled: true,\n        sound: false,\n      },\n      \n      // Actions\n      setTheme: (theme) => set({ theme }),\n      setSidebarCollapsed: (sidebarCollapsed) => set({ sidebarCollapsed }),\n      setIsConnected: (isConnected) => set({ isConnected }),\n      setIsLoading: (isLoading) => set({ isLoading }),\n      setUser: (user) => set({ user }),\n      setNotifications: (notifications) => set({ notifications }),\n    }),\n    {\n      name: '[project-name]-app-store', // Replace with your project name\n      partialize: (state) => ({\n        theme: state.theme,\n        sidebarCollapsed: state.sidebarCollapsed,\n        notifications: state.notifications,\n      }),\n    }\n  )\n);