import "./chunk-2LSFTFF7.js";

// node_modules/text-lower-case/dist.es2015/index.js
var SUPPORTED_LOCALE = {
  tr: {
    regexp: /\u0130|\u0049|\u0049\u0307/g,
    map: {
      İ: "i",
      I: "ı",
      İ: "i"
    }
  },
  az: {
    regexp: /\u0130/g,
    map: {
      İ: "i",
      I: "ı",
      İ: "i"
    }
  },
  lt: {
    regexp: /\u0049|\u004A|\u012E|\u00CC|\u00CD|\u0128/g,
    map: {
      I: "i̇",
      J: "j̇",
      Į: "į̇",
      Ì: "i̇̀",
      Í: "i̇́",
      Ĩ: "i̇̃"
    }
  }
};
function localeLowerCase(str, locale) {
  if (!str)
    return "";
  const lang = SUPPORTED_LOCALE[locale.toLowerCase()];
  if (lang)
    return lowerCase(str.replace(lang.regexp, (m) => lang.map[m]));
  return lowerCase(str);
}
function lowerCase(str) {
  if (!str)
    return "";
  return str.toLowerCase();
}

// node_modules/text-no-case/dist.es2015/index.js
var DEFAULT_SPLIT_REGEXP = [
  /(\p{Ll}|\p{N})(\p{Lu})/gu,
  /(\p{Lu})(\p{Lu}\p{Ll})/gu
];
var DEFAULT_STRIP_REGEXP = /[^\p{L}\p{N}]+/gu;
function noCase(input, options = {}) {
  if (!input)
    return "";
  const { splitRegexp = DEFAULT_SPLIT_REGEXP, stripRegexp = DEFAULT_STRIP_REGEXP, transform = lowerCase, delimiter = " " } = options;
  let result = replace(replace(input, splitRegexp, "$1\0$2"), stripRegexp, "\0");
  let start = 0;
  let end = result.length;
  while (result.charAt(start) === "\0")
    start++;
  while (result.charAt(end - 1) === "\0")
    end--;
  return result.slice(start, end).split("\0").map(transform).join(delimiter);
}
function replace(input, re, value) {
  if (re instanceof RegExp)
    return input.replace(re, value);
  return re.reduce((input2, re2) => input2.replace(re2, value), input);
}

// node_modules/text-pascal-case/dist.es2015/index.js
function pascalCaseTransform(input, index) {
  const firstChar = input.charAt(0);
  const lowerChars = input.substr(1).toLowerCase();
  if (index > 0 && firstChar >= "0" && firstChar <= "9") {
    return `_${firstChar}${lowerChars}`;
  }
  return `${firstChar.toUpperCase()}${lowerChars}`;
}
function pascalCaseTransformMerge(input) {
  return input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();
}
function pascalCase(input, options = {}) {
  if (!input)
    return "";
  return noCase(input, {
    delimiter: "",
    transform: pascalCaseTransform,
    ...options
  });
}

// node_modules/text-camel-case/dist.es2015/index.js
function camelCaseTransform(input, index) {
  if (index === 0)
    return input.toLowerCase();
  return pascalCaseTransform(input, index);
}
function camelCaseTransformMerge(input, index) {
  if (index === 0)
    return input.toLowerCase();
  return pascalCaseTransformMerge(input);
}
function camelCase(input, options = {}) {
  if (!input)
    return "";
  return pascalCase(input, {
    transform: camelCaseTransform,
    ...options
  });
}

// node_modules/text-upper-case-first/dist.es2015/index.js
function upperCaseFirst(str) {
  if (!str)
    return "";
  return str.charAt(0).toUpperCase() + str.substr(1);
}

// node_modules/text-capital-case/dist.es2015/index.js
function capitalCaseTransform(input, index) {
  return upperCaseFirst(input.toLowerCase());
}
function capitalCase(input, options = {}) {
  if (!input)
    return "";
  return noCase(input, {
    delimiter: " ",
    transform: capitalCaseTransform,
    ...options
  });
}

// node_modules/text-upper-case/dist.es2015/index.js
var SUPPORTED_LOCALE2 = {
  tr: {
    regexp: /[\u0069]/g,
    map: {
      i: "İ"
    }
  },
  az: {
    regexp: /[\u0069]/g,
    map: {
      i: "İ"
    }
  },
  lt: {
    regexp: /[\u0069\u006A\u012F]\u0307|\u0069\u0307[\u0300\u0301\u0303]/g,
    map: {
      i̇: "I",
      j̇: "J",
      į̇: "Į",
      i̇̀: "Ì",
      i̇́: "Í",
      i̇̃: "Ĩ"
    }
  }
};
function localeUpperCase(str, locale) {
  if (!str)
    return "";
  const lang = SUPPORTED_LOCALE2[locale.toLowerCase()];
  if (lang)
    return upperCase(str.replace(lang.regexp, (m) => lang.map[m]));
  return upperCase(str);
}
function upperCase(str) {
  if (!str)
    return "";
  return str.toUpperCase();
}

// node_modules/text-constant-case/dist.es2015/index.js
function constantCase(input, options = {}) {
  if (!input)
    return "";
  return noCase(input, {
    delimiter: "_",
    transform: upperCase,
    ...options
  });
}

// node_modules/text-dot-case/dist.es2015/index.js
function dotCase(input, options = {}) {
  if (!input)
    return "";
  return noCase(input, {
    delimiter: ".",
    ...options
  });
}

// node_modules/text-header-case/dist.es2015/index.js
function headerCase(input, options = {}) {
  return capitalCase(input, {
    delimiter: "-",
    ...options
  });
}

// node_modules/text-is-lower-case/dist.es2015/index.js
function isLowerCase(input) {
  if (!input)
    return false;
  return input.toLowerCase() === input && input.toUpperCase() !== input;
}

// node_modules/text-is-upper-case/dist.es2015/index.js
function isUpperCase(input) {
  if (!input)
    return false;
  return input.toUpperCase() === input && input.toLowerCase() !== input;
}

// node_modules/text-lower-case-first/dist.es2015/index.js
function lowerCaseFirst(str) {
  if (!str)
    return "";
  return str.charAt(0).toLowerCase() + str.substr(1);
}

// node_modules/text-param-case/dist.es2015/index.js
function paramCase(input, options = {}) {
  if (!input)
    return "";
  return dotCase(input, {
    delimiter: "-",
    ...options
  });
}

// node_modules/text-path-case/dist.es2015/index.js
function pathCase(input, options = {}) {
  if (!input)
    return "";
  return dotCase(input, {
    delimiter: "/",
    ...options
  });
}

// node_modules/text-sentence-case/dist.es2015/index.js
function sentenceCaseTransform(input, index) {
  const result = input.toLowerCase();
  if (index === 0)
    return upperCaseFirst(result);
  return result;
}
function sentenceCase(input, options = {}) {
  return noCase(input, {
    delimiter: " ",
    transform: sentenceCaseTransform,
    ...options
  });
}

// node_modules/text-snake-case/dist.es2015/index.js
function snakeCase(input, options = {}) {
  return dotCase(input, {
    delimiter: "_",
    ...options
  });
}

// node_modules/text-swap-case/dist.es2015/index.js
function swapCase(input) {
  if (!input)
    return "";
  let result = "";
  for (let i = 0; i < input.length; i++) {
    const lower = input[i].toLowerCase();
    result += input[i] === lower ? input[i].toUpperCase() : lower;
  }
  return result;
}

// node_modules/text-title-case/dist.es2015/index.js
var SMALL_WORDS = /* @__PURE__ */ new Set([
  "a",
  "an",
  "and",
  "at",
  "but",
  "by",
  "en",
  "for",
  "if",
  "in",
  "nor",
  "of",
  "on",
  "or",
  "per",
  "so",
  "the",
  "to",
  "up",
  "via",
  "yet"
]);
function titleCaseTransform(input, index, parts) {
  const word = input.toLowerCase();
  if (index === 0 || index === parts.length - 1) {
    return upperCaseFirst(word);
  }
  if (SMALL_WORDS.has(word)) {
    return word;
  }
  return upperCaseFirst(word);
}
function titleCase(input, options = {}) {
  if (!input)
    return "";
  return noCase(input, {
    delimiter: " ",
    transform: titleCaseTransform,
    ...options
  });
}
export {
  camelCase,
  camelCaseTransform,
  camelCaseTransformMerge,
  capitalCase,
  constantCase,
  dotCase,
  headerCase,
  isLowerCase,
  isUpperCase,
  localeLowerCase,
  localeUpperCase,
  lowerCase,
  lowerCaseFirst,
  noCase,
  paramCase,
  pascalCase,
  pascalCaseTransform,
  pascalCaseTransformMerge,
  pathCase,
  sentenceCase,
  sentenceCaseTransform,
  snakeCase,
  swapCase,
  titleCase,
  upperCase,
  upperCaseFirst
};
//# sourceMappingURL=text-case.js.map
