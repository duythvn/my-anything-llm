{
  "version": 3,
  "sources": ["../../text-lower-case/dist.es2015/index.js", "../../text-no-case/dist.es2015/index.js", "../../text-pascal-case/dist.es2015/index.js", "../../text-camel-case/dist.es2015/index.js", "../../text-upper-case-first/dist.es2015/index.js", "../../text-capital-case/dist.es2015/index.js", "../../text-upper-case/dist.es2015/index.js", "../../text-constant-case/dist.es2015/index.js", "../../text-dot-case/dist.es2015/index.js", "../../text-header-case/dist.es2015/index.js", "../../text-is-lower-case/dist.es2015/index.js", "../../text-is-upper-case/dist.es2015/index.js", "../../text-lower-case-first/dist.es2015/index.js", "../../text-param-case/dist.es2015/index.js", "../../text-path-case/dist.es2015/index.js", "../../text-sentence-case/dist.es2015/index.js", "../../text-snake-case/dist.es2015/index.js", "../../text-swap-case/dist.es2015/index.js", "../../text-title-case/dist.es2015/index.js"],
  "sourcesContent": ["/**\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n */\nconst SUPPORTED_LOCALE = {\n    tr: {\n        regexp: /\\u0130|\\u0049|\\u0049\\u0307/g,\n        map: {\n            İ: \"\\u0069\",\n            I: \"\\u0131\",\n            İ: \"\\u0069\",\n        },\n    },\n    az: {\n        regexp: /\\u0130/g,\n        map: {\n            İ: \"\\u0069\",\n            I: \"\\u0131\",\n            İ: \"\\u0069\",\n        },\n    },\n    lt: {\n        regexp: /\\u0049|\\u004A|\\u012E|\\u00CC|\\u00CD|\\u0128/g,\n        map: {\n            I: \"\\u0069\\u0307\",\n            J: \"\\u006A\\u0307\",\n            Į: \"\\u012F\\u0307\",\n            Ì: \"\\u0069\\u0307\\u0300\",\n            Í: \"\\u0069\\u0307\\u0301\",\n            Ĩ: \"\\u0069\\u0307\\u0303\",\n        },\n    },\n};\n/**\n * Localized lower case.\n */\nexport function localeLowerCase(str, locale) {\n    // Handle null/undefined inputs gracefully\n    if (!str)\n        return \"\";\n    const lang = SUPPORTED_LOCALE[locale.toLowerCase()];\n    if (lang)\n        return lowerCase(str.replace(lang.regexp, (m) => lang.map[m]));\n    return lowerCase(str);\n}\n/**\n * Lower case as a function.\n */\nexport function lowerCase(str) {\n    // Handle null/undefined inputs gracefully\n    if (!str)\n        return \"\";\n    return str.toLowerCase();\n}\n", "import { lowerCase } from \"text-lower-case\";\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\n// Updated to support Unicode letters\nconst DEFAULT_SPLIT_REGEXP = [\n    /(\\p{Ll}|\\p{N})(\\p{Lu})/gu,\n    /(\\p{Lu})(\\p{Lu}\\p{Ll})/gu,\n];\n// Remove all non-word characters, but preserve Unicode letters and numbers.\n// Updated to use Unicode-aware character classes\nconst DEFAULT_STRIP_REGEXP = /[^\\p{L}\\p{N}]+/gu;\n/**\n * Normalize text into something other libraries can manipulate easier.\n */\nexport function noCase(input, options = {}) {\n    // Handle null/undefined inputs gracefully\n    if (!input)\n        return \"\";\n    const { splitRegexp = DEFAULT_SPLIT_REGEXP, stripRegexp = DEFAULT_STRIP_REGEXP, transform = lowerCase, delimiter = \" \", } = options;\n    let result = replace(replace(input, splitRegexp, \"$1\\0$2\"), stripRegexp, \"\\0\");\n    let start = 0;\n    let end = result.length;\n    // Trim the delimiter from around the output string.\n    while (result.charAt(start) === \"\\0\")\n        start++;\n    while (result.charAt(end - 1) === \"\\0\")\n        end--;\n    // Transform each token independently.\n    return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input, re, value) {\n    if (re instanceof RegExp)\n        return input.replace(re, value);\n    return re.reduce((input, re) => input.replace(re, value), input);\n}\n", "import { noCase } from \"text-no-case\";\nexport function pascalCaseTransform(input, index) {\n    const firstChar = input.charAt(0);\n    const lowerChars = input.substr(1).toLowerCase();\n    if (index > 0 && firstChar >= \"0\" && firstChar <= \"9\") {\n        return `_${firstChar}${lowerChars}`;\n    }\n    return `${firstChar.toUpperCase()}${lowerChars}`;\n}\nexport function pascalCaseTransformMerge(input) {\n    return input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();\n}\nexport function pascalCase(input, options = {}) {\n    // Handle null/undefined inputs gracefully\n    if (!input)\n        return \"\";\n    return noCase(input, {\n        delimiter: \"\",\n        transform: pascalCaseTransform,\n        ...options,\n    });\n}\n", "import { pascalCase, pascalCaseTransform, pascalCaseTransformMerge, } from \"text-pascal-case\";\nexport function camelCaseTransform(input, index) {\n    if (index === 0)\n        return input.toLowerCase();\n    return pascalCaseTransform(input, index);\n}\nexport function camelCaseTransformMerge(input, index) {\n    if (index === 0)\n        return input.toLowerCase();\n    return pascalCaseTransformMerge(input);\n}\nexport function camelCase(input, options = {}) {\n    // Handle null/undefined inputs gracefully\n    if (!input)\n        return \"\";\n    return pascalCase(input, {\n        transform: camelCaseTransform,\n        ...options,\n    });\n}\n", "/**\n * Upper case the first character of an input string.\n */\nexport function upperCaseFirst(str) {\n    // Handle null/undefined inputs gracefully\n    if (!str)\n        return \"\";\n    return str.charAt(0).toUpperCase() + str.substr(1);\n}\n", "import { noCase } from \"text-no-case\";\nimport { upperCaseFirst } from \"text-upper-case-first\";\nfunction capitalCaseTransform(input, index) {\n    // Convert to lowercase first, then capitalize first letter\n    return upperCaseFirst(input.toLowerCase());\n}\nexport function capitalCase(input, options = {}) {\n    // Handle null/undefined inputs gracefully\n    if (!input)\n        return \"\";\n    return noCase(input, {\n        delimiter: \" \",\n        transform: capitalCaseTransform,\n        ...options,\n    });\n}\n", "/**\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n */\nconst SUPPORTED_LOCALE = {\n    tr: {\n        regexp: /[\\u0069]/g,\n        map: {\n            i: \"\\u0130\",\n        },\n    },\n    az: {\n        regexp: /[\\u0069]/g,\n        map: {\n            i: \"\\u0130\",\n        },\n    },\n    lt: {\n        regexp: /[\\u0069\\u006A\\u012F]\\u0307|\\u0069\\u0307[\\u0300\\u0301\\u0303]/g,\n        map: {\n            i̇: \"\\u0049\",\n            j̇: \"\\u004A\",\n            į̇: \"\\u012E\",\n            i̇̀: \"\\u00CC\",\n            i̇́: \"\\u00CD\",\n            i̇̃: \"\\u0128\",\n        },\n    },\n};\n/**\n * Localized upper case.\n */\nexport function localeUpperCase(str, locale) {\n    // Handle null/undefined inputs gracefully\n    if (!str)\n        return \"\";\n    const lang = SUPPORTED_LOCALE[locale.toLowerCase()];\n    if (lang)\n        return upperCase(str.replace(lang.regexp, (m) => lang.map[m]));\n    return upperCase(str);\n}\n/**\n * Upper case as a function.\n */\nexport function upperCase(str) {\n    // Handle null/undefined inputs gracefully\n    if (!str)\n        return \"\";\n    return str.toUpperCase();\n}\n", "import { noCase } from \"text-no-case\";\nimport { upperCase } from \"text-upper-case\";\nexport function constantCase(input, options = {}) {\n    // Handle null/undefined inputs gracefully\n    if (!input)\n        return \"\";\n    return noCase(input, {\n        delimiter: \"_\",\n        transform: upperCase,\n        ...options,\n    });\n}\n", "import { noCase } from \"text-no-case\";\nexport function dotCase(input, options = {}) {\n    // Handle null/undefined inputs gracefully\n    if (!input)\n        return \"\";\n    return noCase(input, {\n        delimiter: \".\",\n        ...options,\n    });\n}\n", "import { capitalCase } from \"text-capital-case\";\nexport function headerCase(input, options = {}) {\n    return capitalCase(input, {\n        delimiter: \"-\",\n        ...options,\n    });\n}\n", "/**\n * Returns a boolean indicating whether text is lower case.\n */\nexport function isLowerCase(input) {\n    // Handle null/undefined inputs gracefully\n    if (!input)\n        return false;\n    return input.toLowerCase() === input && input.toUpperCase() !== input;\n}\n", "/**\n * Returns a boolean indicating whether text is upper case.\n */\nexport function isUpperCase(input) {\n    // Handle null/undefined inputs gracefully\n    if (!input)\n        return false;\n    return input.toUpperCase() === input && input.toLowerCase() !== input;\n}\n", "/**\n * Lower case the first character of an input string.\n */\nexport function lowerCaseFirst(str) {\n    // Handle null/undefined inputs gracefully\n    if (!str)\n        return \"\";\n    return str.charAt(0).toLowerCase() + str.substr(1);\n}\n", "import { dotCase } from \"text-dot-case\";\nexport function paramCase(input, options = {}) {\n    // Handle null/undefined inputs gracefully\n    if (!input)\n        return \"\";\n    return dotCase(input, {\n        delimiter: \"-\",\n        ...options,\n    });\n}\n", "import { dotCase } from \"text-dot-case\";\nexport function pathCase(input, options = {}) {\n    // Handle null/undefined inputs gracefully\n    if (!input)\n        return \"\";\n    return dotCase(input, {\n        delimiter: \"/\",\n        ...options,\n    });\n}\n", "import { noCase } from \"text-no-case\";\nimport { upperCaseFirst } from \"text-upper-case-first\";\nexport function sentenceCaseTransform(input, index) {\n    const result = input.toLowerCase();\n    if (index === 0)\n        return upperCaseFirst(result);\n    return result;\n}\nexport function sentenceCase(input, options = {}) {\n    return noCase(input, {\n        delimiter: \" \",\n        transform: sentenceCaseTransform,\n        ...options,\n    });\n}\n", "import { dotCase } from \"text-dot-case\";\nexport function snakeCase(input, options = {}) {\n    return dotCase(input, {\n        delimiter: \"_\",\n        ...options,\n    });\n}\n", "export function swapCase(input) {\n    if (!input)\n        return \"\";\n    let result = \"\";\n    for (let i = 0; i < input.length; i++) {\n        const lower = input[i].toLowerCase();\n        result += input[i] === lower ? input[i].toUpperCase() : lower;\n    }\n    return result;\n}\n", "import { noCase } from \"text-no-case\";\nimport { upperCaseFirst } from \"text-upper-case-first\";\n// Small words that should not be capitalized unless they are at the beginning or end\nconst SMALL_WORDS = new Set([\n    \"a\",\n    \"an\",\n    \"and\",\n    \"at\",\n    \"but\",\n    \"by\",\n    \"en\",\n    \"for\",\n    \"if\",\n    \"in\",\n    \"nor\",\n    \"of\",\n    \"on\",\n    \"or\",\n    \"per\",\n    \"so\",\n    \"the\",\n    \"to\",\n    \"up\",\n    \"via\",\n    \"yet\",\n]);\nfunction titleCaseTransform(input, index, parts) {\n    const word = input.toLowerCase();\n    // Always capitalize first and last words\n    if (index === 0 || index === parts.length - 1) {\n        return upperCaseFirst(word);\n    }\n    // Don't capitalize small words in the middle\n    if (SMALL_WORDS.has(word)) {\n        return word;\n    }\n    // Capitalize all other words\n    return upperCaseFirst(word);\n}\nexport function titleCase(input, options = {}) {\n    // Handle null/undefined inputs gracefully\n    if (!input)\n        return \"\";\n    return noCase(input, {\n        delimiter: \" \",\n        transform: titleCaseTransform,\n        ...options,\n    });\n}\n"],
  "mappings": ";;;AAGA,IAAM,mBAAmB;AAAA,EACrB,IAAI;AAAA,IACA,QAAQ;AAAA,IACR,KAAK;AAAA,MACD,GAAG;AAAA,MACH,GAAG;AAAA,MACH,IAAI;AAAA,IACR;AAAA,EACJ;AAAA,EACA,IAAI;AAAA,IACA,QAAQ;AAAA,IACR,KAAK;AAAA,MACD,GAAG;AAAA,MACH,GAAG;AAAA,MACH,IAAI;AAAA,IACR;AAAA,EACJ;AAAA,EACA,IAAI;AAAA,IACA,QAAQ;AAAA,IACR,KAAK;AAAA,MACD,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACP;AAAA,EACJ;AACJ;AAIO,SAAS,gBAAgB,KAAK,QAAQ;AAEzC,MAAI,CAAC;AACD,WAAO;AACX,QAAM,OAAO,iBAAiB,OAAO,YAAY,CAAC;AAClD,MAAI;AACA,WAAO,UAAU,IAAI,QAAQ,KAAK,QAAQ,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC;AACjE,SAAO,UAAU,GAAG;AACxB;AAIO,SAAS,UAAU,KAAK;AAE3B,MAAI,CAAC;AACD,WAAO;AACX,SAAO,IAAI,YAAY;AAC3B;;;ACjDA,IAAM,uBAAuB;AAAA,EACzB;AAAA,EACA;AACJ;AAGA,IAAM,uBAAuB;AAItB,SAAS,OAAO,OAAO,UAAU,CAAC,GAAG;AAExC,MAAI,CAAC;AACD,WAAO;AACX,QAAM,EAAE,cAAc,sBAAsB,cAAc,sBAAsB,YAAY,WAAW,YAAY,IAAK,IAAI;AAC5H,MAAI,SAAS,QAAQ,QAAQ,OAAO,aAAa,QAAQ,GAAG,aAAa,IAAI;AAC7E,MAAI,QAAQ;AACZ,MAAI,MAAM,OAAO;AAEjB,SAAO,OAAO,OAAO,KAAK,MAAM;AAC5B;AACJ,SAAO,OAAO,OAAO,MAAM,CAAC,MAAM;AAC9B;AAEJ,SAAO,OAAO,MAAM,OAAO,GAAG,EAAE,MAAM,IAAI,EAAE,IAAI,SAAS,EAAE,KAAK,SAAS;AAC7E;AAIA,SAAS,QAAQ,OAAO,IAAI,OAAO;AAC/B,MAAI,cAAc;AACd,WAAO,MAAM,QAAQ,IAAI,KAAK;AAClC,SAAO,GAAG,OAAO,CAACA,QAAOC,QAAOD,OAAM,QAAQC,KAAI,KAAK,GAAG,KAAK;AACnE;;;ACnCO,SAAS,oBAAoB,OAAO,OAAO;AAC9C,QAAM,YAAY,MAAM,OAAO,CAAC;AAChC,QAAM,aAAa,MAAM,OAAO,CAAC,EAAE,YAAY;AAC/C,MAAI,QAAQ,KAAK,aAAa,OAAO,aAAa,KAAK;AACnD,WAAO,IAAI,SAAS,GAAG,UAAU;AAAA,EACrC;AACA,SAAO,GAAG,UAAU,YAAY,CAAC,GAAG,UAAU;AAClD;AACO,SAAS,yBAAyB,OAAO;AAC5C,SAAO,MAAM,OAAO,CAAC,EAAE,YAAY,IAAI,MAAM,MAAM,CAAC,EAAE,YAAY;AACtE;AACO,SAAS,WAAW,OAAO,UAAU,CAAC,GAAG;AAE5C,MAAI,CAAC;AACD,WAAO;AACX,SAAO,OAAO,OAAO;AAAA,IACjB,WAAW;AAAA,IACX,WAAW;AAAA,IACX,GAAG;AAAA,EACP,CAAC;AACL;;;ACpBO,SAAS,mBAAmB,OAAO,OAAO;AAC7C,MAAI,UAAU;AACV,WAAO,MAAM,YAAY;AAC7B,SAAO,oBAAoB,OAAO,KAAK;AAC3C;AACO,SAAS,wBAAwB,OAAO,OAAO;AAClD,MAAI,UAAU;AACV,WAAO,MAAM,YAAY;AAC7B,SAAO,yBAAyB,KAAK;AACzC;AACO,SAAS,UAAU,OAAO,UAAU,CAAC,GAAG;AAE3C,MAAI,CAAC;AACD,WAAO;AACX,SAAO,WAAW,OAAO;AAAA,IACrB,WAAW;AAAA,IACX,GAAG;AAAA,EACP,CAAC;AACL;;;AChBO,SAAS,eAAe,KAAK;AAEhC,MAAI,CAAC;AACD,WAAO;AACX,SAAO,IAAI,OAAO,CAAC,EAAE,YAAY,IAAI,IAAI,OAAO,CAAC;AACrD;;;ACNA,SAAS,qBAAqB,OAAO,OAAO;AAExC,SAAO,eAAe,MAAM,YAAY,CAAC;AAC7C;AACO,SAAS,YAAY,OAAO,UAAU,CAAC,GAAG;AAE7C,MAAI,CAAC;AACD,WAAO;AACX,SAAO,OAAO,OAAO;AAAA,IACjB,WAAW;AAAA,IACX,WAAW;AAAA,IACX,GAAG;AAAA,EACP,CAAC;AACL;;;ACZA,IAAMC,oBAAmB;AAAA,EACrB,IAAI;AAAA,IACA,QAAQ;AAAA,IACR,KAAK;AAAA,MACD,GAAG;AAAA,IACP;AAAA,EACJ;AAAA,EACA,IAAI;AAAA,IACA,QAAQ;AAAA,IACR,KAAK;AAAA,MACD,GAAG;AAAA,IACP;AAAA,EACJ;AAAA,EACA,IAAI;AAAA,IACA,QAAQ;AAAA,IACR,KAAK;AAAA,MACD,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,IACT;AAAA,EACJ;AACJ;AAIO,SAAS,gBAAgB,KAAK,QAAQ;AAEzC,MAAI,CAAC;AACD,WAAO;AACX,QAAM,OAAOA,kBAAiB,OAAO,YAAY,CAAC;AAClD,MAAI;AACA,WAAO,UAAU,IAAI,QAAQ,KAAK,QAAQ,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC;AACjE,SAAO,UAAU,GAAG;AACxB;AAIO,SAAS,UAAU,KAAK;AAE3B,MAAI,CAAC;AACD,WAAO;AACX,SAAO,IAAI,YAAY;AAC3B;;;AC9CO,SAAS,aAAa,OAAO,UAAU,CAAC,GAAG;AAE9C,MAAI,CAAC;AACD,WAAO;AACX,SAAO,OAAO,OAAO;AAAA,IACjB,WAAW;AAAA,IACX,WAAW;AAAA,IACX,GAAG;AAAA,EACP,CAAC;AACL;;;ACVO,SAAS,QAAQ,OAAO,UAAU,CAAC,GAAG;AAEzC,MAAI,CAAC;AACD,WAAO;AACX,SAAO,OAAO,OAAO;AAAA,IACjB,WAAW;AAAA,IACX,GAAG;AAAA,EACP,CAAC;AACL;;;ACRO,SAAS,WAAW,OAAO,UAAU,CAAC,GAAG;AAC5C,SAAO,YAAY,OAAO;AAAA,IACtB,WAAW;AAAA,IACX,GAAG;AAAA,EACP,CAAC;AACL;;;ACHO,SAAS,YAAY,OAAO;AAE/B,MAAI,CAAC;AACD,WAAO;AACX,SAAO,MAAM,YAAY,MAAM,SAAS,MAAM,YAAY,MAAM;AACpE;;;ACLO,SAAS,YAAY,OAAO;AAE/B,MAAI,CAAC;AACD,WAAO;AACX,SAAO,MAAM,YAAY,MAAM,SAAS,MAAM,YAAY,MAAM;AACpE;;;ACLO,SAAS,eAAe,KAAK;AAEhC,MAAI,CAAC;AACD,WAAO;AACX,SAAO,IAAI,OAAO,CAAC,EAAE,YAAY,IAAI,IAAI,OAAO,CAAC;AACrD;;;ACPO,SAAS,UAAU,OAAO,UAAU,CAAC,GAAG;AAE3C,MAAI,CAAC;AACD,WAAO;AACX,SAAO,QAAQ,OAAO;AAAA,IAClB,WAAW;AAAA,IACX,GAAG;AAAA,EACP,CAAC;AACL;;;ACRO,SAAS,SAAS,OAAO,UAAU,CAAC,GAAG;AAE1C,MAAI,CAAC;AACD,WAAO;AACX,SAAO,QAAQ,OAAO;AAAA,IAClB,WAAW;AAAA,IACX,GAAG;AAAA,EACP,CAAC;AACL;;;ACPO,SAAS,sBAAsB,OAAO,OAAO;AAChD,QAAM,SAAS,MAAM,YAAY;AACjC,MAAI,UAAU;AACV,WAAO,eAAe,MAAM;AAChC,SAAO;AACX;AACO,SAAS,aAAa,OAAO,UAAU,CAAC,GAAG;AAC9C,SAAO,OAAO,OAAO;AAAA,IACjB,WAAW;AAAA,IACX,WAAW;AAAA,IACX,GAAG;AAAA,EACP,CAAC;AACL;;;ACbO,SAAS,UAAU,OAAO,UAAU,CAAC,GAAG;AAC3C,SAAO,QAAQ,OAAO;AAAA,IAClB,WAAW;AAAA,IACX,GAAG;AAAA,EACP,CAAC;AACL;;;ACNO,SAAS,SAAS,OAAO;AAC5B,MAAI,CAAC;AACD,WAAO;AACX,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,UAAM,QAAQ,MAAM,CAAC,EAAE,YAAY;AACnC,cAAU,MAAM,CAAC,MAAM,QAAQ,MAAM,CAAC,EAAE,YAAY,IAAI;AAAA,EAC5D;AACA,SAAO;AACX;;;ACNA,IAAM,cAAc,oBAAI,IAAI;AAAA,EACxB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,CAAC;AACD,SAAS,mBAAmB,OAAO,OAAO,OAAO;AAC7C,QAAM,OAAO,MAAM,YAAY;AAE/B,MAAI,UAAU,KAAK,UAAU,MAAM,SAAS,GAAG;AAC3C,WAAO,eAAe,IAAI;AAAA,EAC9B;AAEA,MAAI,YAAY,IAAI,IAAI,GAAG;AACvB,WAAO;AAAA,EACX;AAEA,SAAO,eAAe,IAAI;AAC9B;AACO,SAAS,UAAU,OAAO,UAAU,CAAC,GAAG;AAE3C,MAAI,CAAC;AACD,WAAO;AACX,SAAO,OAAO,OAAO;AAAA,IACjB,WAAW;AAAA,IACX,WAAW;AAAA,IACX,GAAG;AAAA,EACP,CAAC;AACL;",
  "names": ["input", "re", "SUPPORTED_LOCALE"]
}
