import {
  __commonJS
} from "./chunk-2LSFTFF7.js";

// node_modules/truncate/truncate.js
var require_truncate = __commonJS({
  "node_modules/truncate/truncate.js"(exports, module) {
    (function(context, undefined) {
      "use strict";
      var DEFAULT_TRUNCATE_SYMBOL = "â€¦", URL_REGEX = /(((ftp|https?):\/\/)[\-\w@:%_\+.~#?,&\/\/=]+)|((mailto:)?[_.\w-]{1,300}@(.{1,300}\.)[a-zA-Z]{2,3})/g;
      function __appendEllipsis(string, options, content) {
        if (content.length === string.length || !options.ellipsis) {
          return content;
        }
        content += options.ellipsis;
        return content;
      }
      function truncate(string, maxLength, options) {
        var content = "", matches = true, remainingLength = maxLength, result, index;
        options = options || {};
        options.ellipsis = typeof options.ellipsis === "undefined" ? DEFAULT_TRUNCATE_SYMBOL : options.ellipsis;
        if (!string || string.length === 0) {
          return "";
        }
        matches = true;
        while (matches) {
          URL_REGEX.lastIndex = content.length;
          matches = URL_REGEX.exec(string);
          if (!matches || matches.index - content.length >= remainingLength || URL_REGEX.lastIndex >= maxLength + 3e3) {
            content += string.substring(content.length, maxLength);
            return __appendEllipsis(string, options, content, maxLength);
          }
          result = matches[0];
          index = matches.index;
          content += string.substring(content.length, index + result.length);
          remainingLength -= index + result.length;
          if (remainingLength <= 0) {
            break;
          }
        }
        return __appendEllipsis(string, options, content, maxLength);
      }
      if ("undefined" !== typeof module && module.exports) {
        module.exports = truncate;
      } else {
        context.truncate = truncate;
      }
    })(String);
  }
});
export default require_truncate();
//# sourceMappingURL=truncate.js.map
