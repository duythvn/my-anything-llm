{
  "version": 3,
  "sources": ["../../truncate/truncate.js"],
  "sourcesContent": ["/*global module:true*/\n/*jslint nomen:true*/\n/**\n * @module Utility\n */\n(function (context, undefined) {\n    'use strict';\n\n    var DEFAULT_TRUNCATE_SYMBOL = 'â€¦',\n        // Limit emails to no more than about 600 chars, well over the max of ~300.\n        // cf. RFC: https://www.rfc-editor.org/errata_search.php?eid=1690\n        URL_REGEX = /(((ftp|https?):\\/\\/)[\\-\\w@:%_\\+.~#?,&\\/\\/=]+)|((mailto:)?[_.\\w-]{1,300}@(.{1,300}\\.)[a-zA-Z]{2,3})/g;\n\n    function __appendEllipsis(string, options, content) {\n        if (content.length === string.length || !options.ellipsis) {\n            return content;\n        }\n        content += options.ellipsis;\n        return content;\n    }\n    /**\n     * Truncate HTML string and keep tag safe.\n     *\n     * @method truncate\n     * @param {String} string string needs to be truncated\n     * @param {Number} maxLength length of truncated string\n     * @param {Object} options (optional)\n     * @param {Boolean|String} [options.ellipsis] omission symbol for truncated string, '...' by default\n     * @return {String} truncated string\n     */\n    function truncate(string, maxLength, options) {\n        var content = '', // truncated text storage\n            matches = true,\n            remainingLength = maxLength,\n            result,\n            index;\n\n        options = options || {};\n        options.ellipsis = (typeof options.ellipsis === \"undefined\") ? DEFAULT_TRUNCATE_SYMBOL : options.ellipsis;\n\n        if (!string || string.length === 0) {\n            return '';\n        }\n\n        matches = true;\n        while (matches) {\n            URL_REGEX.lastIndex = content.length;\n            matches = URL_REGEX.exec(string);\n            // Don't try to retain URLs longer than 3k chars, well over the 99th percentile of ~347\n            if (!matches || (matches.index - content.length) >= remainingLength || URL_REGEX.lastIndex >= (maxLength + 3000)) {\n                content += string.substring(content.length, maxLength);\n                return __appendEllipsis(string, options, content, maxLength);\n            }\n\n            result = matches[0];\n            index = matches.index;\n            content += string.substring(content.length, index + result.length);\n            remainingLength -= index + result.length;\n\n            if (remainingLength <= 0) {\n                break;\n            }\n        }\n\n        return __appendEllipsis(string, options, content, maxLength);\n    }\n\n    if ('undefined' !== typeof module && module.exports) {\n        module.exports = truncate;\n    } else {\n        context.truncate = truncate;\n    }\n}(String));\n"],
  "mappings": ";;;;;AAAA;AAAA;AAKA,KAAC,SAAU,SAAS,WAAW;AAC3B;AAEA,UAAI,0BAA0B,KAG1B,YAAY;AAEhB,eAAS,iBAAiB,QAAQ,SAAS,SAAS;AAChD,YAAI,QAAQ,WAAW,OAAO,UAAU,CAAC,QAAQ,UAAU;AACvD,iBAAO;AAAA,QACX;AACA,mBAAW,QAAQ;AACnB,eAAO;AAAA,MACX;AAWA,eAAS,SAAS,QAAQ,WAAW,SAAS;AAC1C,YAAI,UAAU,IACV,UAAU,MACV,kBAAkB,WAClB,QACA;AAEJ,kBAAU,WAAW,CAAC;AACtB,gBAAQ,WAAY,OAAO,QAAQ,aAAa,cAAe,0BAA0B,QAAQ;AAEjG,YAAI,CAAC,UAAU,OAAO,WAAW,GAAG;AAChC,iBAAO;AAAA,QACX;AAEA,kBAAU;AACV,eAAO,SAAS;AACZ,oBAAU,YAAY,QAAQ;AAC9B,oBAAU,UAAU,KAAK,MAAM;AAE/B,cAAI,CAAC,WAAY,QAAQ,QAAQ,QAAQ,UAAW,mBAAmB,UAAU,aAAc,YAAY,KAAO;AAC9G,uBAAW,OAAO,UAAU,QAAQ,QAAQ,SAAS;AACrD,mBAAO,iBAAiB,QAAQ,SAAS,SAAS,SAAS;AAAA,UAC/D;AAEA,mBAAS,QAAQ,CAAC;AAClB,kBAAQ,QAAQ;AAChB,qBAAW,OAAO,UAAU,QAAQ,QAAQ,QAAQ,OAAO,MAAM;AACjE,6BAAmB,QAAQ,OAAO;AAElC,cAAI,mBAAmB,GAAG;AACtB;AAAA,UACJ;AAAA,QACJ;AAEA,eAAO,iBAAiB,QAAQ,SAAS,SAAS,SAAS;AAAA,MAC/D;AAEA,UAAI,gBAAgB,OAAO,UAAU,OAAO,SAAS;AACjD,eAAO,UAAU;AAAA,MACrB,OAAO;AACH,gBAAQ,WAAW;AAAA,MACvB;AAAA,IACJ,GAAE,MAAM;AAAA;AAAA;",
  "names": []
}
