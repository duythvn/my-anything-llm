'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var html2canvas = require('html2canvas');
var react = require('react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var html2canvas__default = /*#__PURE__*/_interopDefaultLegacy(html2canvas);

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

/**
 * @param {{options: HTML2CanvasOptions, type: string, quality: number}} [args] Optional arguments.
 * @param {HTML2CanvasOptions} [args.options] An html2canvas Options object.
 * @param {number} [args.quality] Applies if the type is an image format that supports variable quality (such as "image/jpeg"), and is a number in the range 0.0 to 1.0 inclusive indicating the desired quality level for the resulting image.
 * @param {string} [args.type] Controls the type of the image to be returned (e.g. PNG or JPEG). The default is "image/png"; that type is also used if the given type isn't supported.
 *
 * [Reference: html.spec.whatwg.org](https://html.spec.whatwg.org/multipage/canvas.html#dom-canvas-todataurl-dev)
 */
function useGenerateImage(args) {
    const ref = react.useRef(null);
    const [isLoading, setIsLoading] = react.useState(false);
    const generateImage = react.useCallback((callback) => __awaiter(this, void 0, void 0, function* () {
        if (ref === null || ref === void 0 ? void 0 : ref.current) {
            setIsLoading(true);
            return yield html2canvas__default["default"](ref.current, Object.assign({ logging: false }, args === null || args === void 0 ? void 0 : args.options)).then((canvas) => {
                if (callback) {
                    canvas.toBlob(callback, args === null || args === void 0 ? void 0 : args.type, args === null || args === void 0 ? void 0 : args.quality);
                }
                setIsLoading(false);
                return canvas.toDataURL(args === null || args === void 0 ? void 0 : args.type, args === null || args === void 0 ? void 0 : args.quality);
            });
        }
    }), [args]);
    return [
        generateImage,
        {
            ref,
            isLoading,
        },
    ];
}
/**
 * @param options - optional html2canvas Options object
 */
function useCurrentPng(options) {
    const ref = react.useRef(null);
    const [isLoading, setIsLoading] = react.useState(false);
    const getPng = react.useCallback((callback) => __awaiter(this, void 0, void 0, function* () {
        var _a;
        if ((_a = ref.current) === null || _a === void 0 ? void 0 : _a.parentElement) {
            setIsLoading(true);
            return yield html2canvas__default["default"](ref.current.parentElement, Object.assign({ logging: false }, options)).then((canvas) => {
                if (callback) {
                    canvas.toBlob(callback, 'image/png', 1.0);
                }
                setIsLoading(false);
                return canvas.toDataURL('image/png', 1.0);
            });
        }
    }), [options]);
    return [
        getPng,
        {
            ref,
            isLoading,
        },
    ];
}
class CurrentPng extends react.Component {
    constructor() {
        super(...arguments);
        this.chartRef = react.createRef();
        this.state = {
            isLoading: false,
        };
        this.getPng = (options) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            if ((_a = this.chartRef.current) === null || _a === void 0 ? void 0 : _a.parentElement) {
                this.setState({ isLoading: true });
                return yield html2canvas__default["default"](this.chartRef.current.parentElement, Object.assign({}, options)).then((canvas) => {
                    this.setState({ isLoading: false });
                    return canvas.toDataURL('image/png', 1.0);
                });
            }
        });
    }
    render() {
        return this.props.children({
            chartRef: this.chartRef,
            getPng: this.getPng,
            isLoading: this.state.isLoading,
        });
    }
}

exports.CurrentPng = CurrentPng;
exports.useCurrentPng = useCurrentPng;
exports.useGenerateImage = useGenerateImage;
//# sourceMappingURL=index.js.map
